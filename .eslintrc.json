{
    "env": {
        "browser": true,
        "commonjs": true,
        "es6": true,
        "node": true
    },
    "extends": "eslint:recommended",
    "globals": {
        "Atomics": "readonly",
        "SharedArrayBuffer": "readonly"
    },
    "parserOptions": {
        "ecmaVersion": 2018
    },
    "rules": {
        // enforces getter/setter pairs in objects
        "accessor-pairs": "off",
    
        // enforces return statements in callbacks of array"s methods
        // https://eslint.org/docs/rules/array-callback-return
        "array-callback-return": ["error", { "allowImplicit": true }],
    
        // treat var statements as if they were block scoped
        "block-scoped-var": "error",
    
        // specify the maximum cyclomatic complexity allowed in a program
        "complexity": ["off", 11],
    
        // enforce that class methods use "this"
        // https://eslint.org/docs/rules/class-methods-use-this
        "class-methods-use-this": ["error", {
          "exceptMethods": []
        }],
    
        // require return statements to either always or never specify values
        "consistent-return": "error",
    
        // specify curly brace conventions for all control statements
        "curly": ["error", "multi-line"],
    
        // require default case in switch statements
        "default-case": ["error", { "commentPattern": "^no default$" }],
    
        // encourages use of dot notation whenever possible
        "dot-notation": ["error", { "allowKeywords": true }],
    
        // enforces consistent newlines before or after dots
        // https://eslint.org/docs/rules/dot-location
        "dot-location": ["error", "property"],
    
        // require the use of === and !==
        // https://eslint.org/docs/rules/eqeqeq
        "eqeqeq": ["error", "always", { "null": "ignore" }],
    
        // make sure for-in loops have an if statement
        "guard-for-in": "error",
    
        // enforce a maximum number of classes per file
        // https://eslint.org/docs/rules/max-classes-per-file
        "max-classes-per-file": ["error", 1],
    
        // disallow the use of alert, confirm, and prompt
        "no-alert": "warn",
    
        // disallow use of arguments.caller or arguments.callee
        "no-caller": "error",
    
        // disallow lexical declarations in case/default clauses
        // https://eslint.org/docs/rules/no-case-declarations.html
        "no-case-declarations": "error",
    
        // disallow division operators explicitly at beginning of regular expression
        // https://eslint.org/docs/rules/no-div-regex
        "no-div-regex": "off",
    
        // disallow else after a return in an if
        // https://eslint.org/docs/rules/no-else-return
        "no-else-return": ["error", { "allowElseIf": false }],
    
        // disallow empty functions, except for standalone funcs/arrows
        // https://eslint.org/docs/rules/no-empty-function
        "no-empty-function": ["error", {
          "allow": [
            "arrowFunctions",
            "functions",
            "methods"
          ]
        }],
    
        // disallow empty destructuring patterns
        // https://eslint.org/docs/rules/no-empty-pattern
        "no-empty-pattern": "error",
    
        // disallow comparisons to null without a type-checking operator
        "no-eq-null": "off",
    
        // disallow use of eval()
        "no-eval": "error",
    
        // disallow adding to native types
        "no-extend-native": "error",
    
        // disallow unnecessary function binding
        "no-extra-bind": "error",
    
        // disallow Unnecessary Labels
        // https://eslint.org/docs/rules/no-extra-label
        "no-extra-label": "error",
    
        // disallow fallthrough of case statements
        "no-fallthrough": "error",
    
        // disallow the use of leading or trailing decimal points in numeric literals
        "no-floating-decimal": "error",
    
        // disallow reassignments of native objects or read-only globals
        // https://eslint.org/docs/rules/no-global-assign
        "no-global-assign": ["error", { "exceptions": [] }],
        // deprecated in favor of no-global-assign
        "no-native-reassign": "off",
    
        // disallow implicit type conversions
        // https://eslint.org/docs/rules/no-implicit-coercion
        "no-implicit-coercion": ["off", {
          "boolean": false,
          "number": true,
          "string": true,
          "allow": []
        }],
    
        // disallow var and named functions in global scope
        // https://eslint.org/docs/rules/no-implicit-globals
        "no-implicit-globals": "off",
    
        // disallow use of eval()-like methods
        "no-implied-eval": "error",
    
        // disallow this keywords outside of classes or class-like objects
        "no-invalid-this": "off",
    
        // disallow usage of __iterator__ property
        "no-iterator": "error",
    
        // disallow use of labels for anything other then loops and switches
        "no-labels": ["error", { "allowLoop": false, "allowSwitch": false }],
    
        // disallow unnecessary nested blocks
        "no-lone-blocks": "error",
    
        // disallow creation of functions within loops
        "no-loop-func": "error",
    
        // disallow magic numbers
        // https://eslint.org/docs/rules/no-magic-numbers
        "no-magic-numbers": ["off", {
          "ignore": [],
          "ignoreArrayIndexes": true,
          "enforceConst": true,
          "detectObjects": false
        }],
    
        // disallow use of multiple spaces
        "no-multi-spaces": ["error", {
          "ignoreEOLComments": false
        }],
    
        // disallow use of multiline strings
        "no-multi-str": "error",
    
        // disallow use of new operator when not part of the assignment or comparison
        "no-new": "error",
    
        // disallow use of new operator for Function object
        "no-new-func": "error",
    
        // disallows creating new instances of String, Number, and Boolean
        "no-new-wrappers": "error",
    
        // disallow use of (old style) octal literals
        "no-octal": "error",
    
        // disallow use of octal escape sequences in string literals, such as
        // var foo = "Copyright \251";
        "no-octal-escape": "error",
    
        // disallow reassignment of function parameters
        // disallow parameter object manipulation except for specific exclusions
        // rule: https://eslint.org/docs/rules/no-param-reassign.html
        "no-param-reassign": ["error", {
          "props": true,
          "ignorePropertyModificationsFor": [
            "acc", // for reduce accumulators
            "accumulator", // for reduce accumulators
            "e", // for e.returnvalue
            "ctx", // for Koa routing
            "req", // for Express requests
            "request", // for Express requests
            "res", // for Express responses
            "response", // for Express responses
            "$scope", // for Angular 1 scopes
            "staticContext" // for ReactRouter context
          ]
        }],
    
        // disallow usage of __proto__ property
        "no-proto": "error",
    
        // disallow declaring the same variable more then once
        "no-redeclare": "error",
    
        // disallow certain object properties
        // https://eslint.org/docs/rules/no-restricted-properties
        "no-restricted-properties": ["error", {
          "object": "arguments",
          "property": "callee",
          "message": "arguments.callee is deprecated"
        }, {
          "object": "global",
          "property": "isFinite",
          "message": "Please use Number.isFinite instead"
        }, {
          "object": "self",
          "property": "isFinite",
          "message": "Please use Number.isFinite instead"
        }, {
          "object": "window",
          "property": "isFinite",
          "message": "Please use Number.isFinite instead"
        }, {
          "object": "global",
          "property": "isNaN",
          "message": "Please use Number.isNaN instead"
        }, {
          "object": "self",
          "property": "isNaN",
          "message": "Please use Number.isNaN instead"
        }, {
          "object": "window",
          "property": "isNaN",
          "message": "Please use Number.isNaN instead"
        }, {
          "property": "__defineGetter__",
          "message": "Please use Object.defineProperty instead."
        }, {
          "property": "__defineSetter__",
          "message": "Please use Object.defineProperty instead."
        }, {
          "object": "Math",
          "property": "pow",
          "message": "Use the exponentiation operator (**) instead."
        }],
    
        // disallow use of assignment in return statement
        "no-return-assign": ["error", "always"],
    
        // disallow redundant `return await`
        "no-return-await": "error",
    
        // disallow use of `javascript:` urls.
        "no-script-url": "error",
    
        // disallow self assignment
        // https://eslint.org/docs/rules/no-self-assign
        "no-self-assign": ["error", {
          "props": true
        }],
    
        // disallow comparisons where both sides are exactly the same
        "no-self-compare": "error",
    
        // disallow use of comma operator
        "no-sequences": "error",
    
        // restrict what can be thrown as an exception
        "no-throw-literal": "error",
    
        // disallow unmodified conditions of loops
        // https://eslint.org/docs/rules/no-unmodified-loop-condition
        "no-unmodified-loop-condition": "off",
    
        // disallow usage of expressions in statement position
        "no-unused-expressions": ["error", {
          "allowShortCircuit": false,
          "allowTernary": false,
          "allowTaggedTemplates": false
        }],
    
        // disallow unused labels
        // https://eslint.org/docs/rules/no-unused-labels
        "no-unused-labels": "error",
    
        // disallow unnecessary .call() and .apply()
        "no-useless-call": "off",
    
        // Disallow unnecessary catch clauses
        // https://eslint.org/docs/rules/no-useless-catch
        "no-useless-catch": "error",
    
        // disallow useless string concatenation
        // https://eslint.org/docs/rules/no-useless-concat
        "no-useless-concat": "error",
    
        // disallow unnecessary string escaping
        // https://eslint.org/docs/rules/no-useless-escape
        "no-useless-escape": "error",
    
        // disallow redundant return; keywords
        // https://eslint.org/docs/rules/no-useless-return
        "no-useless-return": "error",
    
        // disallow use of void operator
        // https://eslint.org/docs/rules/no-void
        "no-void": "error",
    
        // disallow usage of configurable warning terms in comments: e.g. todo
        "no-warning-comments": ["off", { "terms": ["todo", "fixme", "xxx"], "location": "start" }],
    
        // disallow use of the with statement
        "no-with": "error",
    
        // require using Error objects as Promise rejection reasons
        // https://eslint.org/docs/rules/prefer-promise-reject-errors
        "prefer-promise-reject-errors": ["error", { "allowEmptyReject": true }],
    
        // Suggest using named capture group in regular expression
        // https://eslint.org/docs/rules/prefer-named-capture-group
        "prefer-named-capture-group": "off",
    
        // require use of the second argument for parseInt()
        "radix": "error",
    
        // require `await` in `async function` (note: this is a horrible rule that should never be used)
        // https://eslint.org/docs/rules/require-await
        "require-await": "off",
    
        // Enforce the use of u flag on RegExp
        // https://eslint.org/docs/rules/require-unicode-regexp
        "require-unicode-regexp": "off",
    
        // requires to declare all vars on top of their containing scope
        "vars-on-top": "error",
    
        // require immediate function invocation to be wrapped in parentheses
        // https://eslint.org/docs/rules/wrap-iife.html
        "wrap-iife": ["error", "outside", { "functionPrototypeMethods": false }],
    
        // require or disallow Yoda conditions
        "yoda": "error",
    
        // STYLE
          // enforce line breaks after opening and before closing array brackets
        // https://eslint.org/docs/rules/array-bracket-newline
        // TODO: enable? semver-major
       "array-bracket-newline": ["off","consistent"], // object option alternative: { multiline: true, minItems: 3 }
    
        // enforce line breaks between array elements
        // https://eslint.org/docs/rules/array-element-newline
        // TODO: enable? semver-major
       "array-element-newline": ["off", { "multiline": true, "minItems": 3 }],
    
        // enforce spacing inside array brackets
       "array-bracket-spacing": ["error","never"],
    
        // enforce spacing inside single-line blocks
        // https://eslint.org/docs/rules/block-spacing
       "block-spacing": ["error","always"],
    
        // enforce one true brace style
       "brace-style": ["error","1tbs", { "allowSingleLine": true }],
    
        // require camel case names
        "camelcase": ["error", { "properties":"never", "ignoreDestructuring": false }],
    
        // enforce or disallow capitalization of the first letter of a comment
        // https://eslint.org/docs/rules/capitalized-comments
       "capitalized-comments": ["off","never", {
          "line": {
            "ignorePattern":".*",
            "ignoreInlineComments": true,
            "ignoreConsecutiveComments": true
          },
          "block": {
            "ignorePattern":".*",
            "ignoreInlineComments": true,
            "ignoreConsecutiveComments": true
          }
        }],
    
        // require trailing commas in multiline object literals
       "comma-dangle": ["error", {
          "arrays":"always-multiline",
          "objects":"always-multiline",
          "imports":"always-multiline",
          "exports":"always-multiline",
          "functions":"always-multiline"
        }],
    
        // enforce spacing before and after comma
       "comma-spacing": ["error", { "before": false, "after": true }],
    
        // enforce one true comma style
       "comma-style": ["error","last", {
          "exceptions": {
            "ArrayExpression": false,
            "ArrayPattern": false,
            "ArrowFunctionExpression": false,
            "CallExpression": false,
            "FunctionDeclaration": false,
            "FunctionExpression": false,
            "ImportDeclaration": false,
            "ObjectExpression": false,
            "ObjectPattern": false,
            "VariableDeclaration": false,
            "NewExpression": false
          }
        }],
    
        // disallow padding inside computed properties
       "computed-property-spacing": ["error","never"],
    
        // enforces consistent naming when capturing the current execution context
       "consistent-this":"off",
    
        // enforce newline at the end of file, with no multiple empty lines
       "eol-last": ["error","always"],
    
        // enforce spacing between functions and their invocations
        // https://eslint.org/docs/rules/func-call-spacing
       "func-call-spacing": ["error","never"],
    
        // requires function names to match the name of the variable or property to which they are
        // assigned
        // https://eslint.org/docs/rules/func-name-matching
       "func-name-matching": ["off","always", {
          "includeCommonJSModuleExports": false,
          "considerPropertyDescriptor": true
        }],
    
        // require function expressions to have a name
        // https://eslint.org/docs/rules/func-names
       "func-names":"warn",
    
        // enforces use of function declarations or expressions
        // https://eslint.org/docs/rules/func-style
        // TODO: enable
       "func-style": ["off","expression"],
    
        // enforce consistent line breaks inside function parentheses
        // https://eslint.org/docs/rules/function-paren-newline
       "function-paren-newline": ["error","consistent"],
    
        // Blacklist certain identifiers to prevent them being used
        // https://eslint.org/docs/rules/id-blacklist
       "id-blacklist":"off",
    
        // this option enforces minimum and maximum identifier lengths
        // (variable names, property names etc.)
       "id-length":"off",
    
        // require identifiers to match the provided regular expression
       "id-match":"off",
    
        // Enforce the location of arrow function bodies with implicit returns
        // https://eslint.org/docs/rules/implicit-arrow-linebreak
       "implicit-arrow-linebreak": ["error","beside"],
    
        // this option sets a specific tab width for your code
        // https://eslint.org/docs/rules/indent
        "indent": ["error", 2, {
          "SwitchCase": 1,
          "VariableDeclarator": 1,
          "outerIIFEBody": 1,
          // MemberExpression: null,
          "FunctionDeclaration": {
            "parameters": 1,
            "body": 1
          },
          "FunctionExpression": {
            "parameters": 1,
            "body": 1
          },
          "CallExpression": {
            "arguments": 1
          },
          "ArrayExpression": 1,
          "ObjectExpression": 1,
          "ImportDeclaration": 1,
          "flatTernaryExpressions": false,
          // list derived from https://github.com/benjamn/ast-types/blob/HEAD/def/jsx.js
          "ignoredNodes": ["JSXElement","JSXElement > *","JSXAttribute","JSXIdentifier","JSXNamespacedName","JSXMemberExpression","JSXSpreadAttribute","JSXExpressionContainer","JSXOpeningElement","JSXClosingElement","JSXText","JSXEmptyExpression","JSXSpreadChild"],
          "ignoreComments": false
        }],
    
        // specify whether double or single quotes should be used in JSX attributes
        // https://eslint.org/docs/rules/jsx-quotes
       "jsx-quotes": ["off","prefer-double"],
    
        // enforces spacing between keys and values in object literal properties
       "key-spacing": ["error", { "beforeColon": false, "afterColon": true }],
    
        // require a space before & after certain keywords
       "keyword-spacing": ["error", {
          "before": true,
          "after": true,
          "overrides": {
            "return": { "after": true },
            "throw": { "after": true },
            "case": { "after": true }
          }
        }],
    
        // enforce position of line comments
        // https://eslint.org/docs/rules/line-comment-position
        // TODO: enable?
       "line-comment-position": ["off", {
          "position":"above",
          "ignorePattern":"",
          "applyDefaultPatterns": true
        }],
    
        // disallow mixed"LF" and"CRLF" as linebreaks
        // https://eslint.org/docs/rules/linebreak-style
       "linebreak-style": ["error","windows"],
    
        // require or disallow an empty line between class members
        // https://eslint.org/docs/rules/lines-between-class-members
       "lines-between-class-members": ["error","always", { "exceptAfterSingleLine": false }],
    
        // enforces empty lines around comments
       "lines-around-comment":"off",
    
        // require or disallow newlines around directives
        // https://eslint.org/docs/rules/lines-around-directive
       "lines-around-directive": ["error", {
          "before":"always",
          "after":"always"
        }],
    
        // specify the maximum depth that blocks can be nested
       "max-depth": ["off", 4],
    
        // specify the maximum length of a line in your program
        // https://eslint.org/docs/rules/max-len
       "max-len": ["error", 100, 2, {
          "ignoreUrls": true,
          "ignoreComments": false,
          "ignoreRegExpLiterals": true,
          "ignoreStrings": true,
          "ignoreTemplateLiterals": true
        }],
    
        // specify the max number of lines in a file
        // https://eslint.org/docs/rules/max-lines
       "max-lines": ["off", {
          "max": 300,
          "skipBlankLines": true,
          "skipComments": true
        }],
    
        // enforce a maximum function length
        // https://eslint.org/docs/rules/max-lines-per-function
       "max-lines-per-function": ["off", {
          "max": 50,
          "skipBlankLines": true,
          "skipComments": true,
          "IIFEs": true
        }],
    
        // specify the maximum depth callbacks can be nested
       "max-nested-callbacks":"off",
    
        // limits the number of parameters that can be used in the function declaration.
       "max-params": ["off", 3],
    
        // specify the maximum number of statement allowed in a function
       "max-statements": ["off", 10],
    
        // restrict the number of statements per line
        // https://eslint.org/docs/rules/max-statements-per-line
       "max-statements-per-line": ["off", { "max": 1 }],
    
        // enforce a particular style for multiline comments
        // https://eslint.org/docs/rules/multiline-comment-style
       "multiline-comment-style": ["off","starred-block"],
    
        // require multiline ternary
        // https://eslint.org/docs/rules/multiline-ternary
        // TODO: enable?
       "multiline-ternary": ["off","never"],
    
        // require a capital letter for constructors
       "new-cap": ["error", {
          "newIsCap": true,
          "newIsCapExceptions": [],
          "capIsNew": false,
          "capIsNewExceptions": ["Immutable.Map","Immutable.Set","Immutable.List"]
        }],
    
        // disallow the omission of parentheses when invoking a constructor with no arguments
        // https://eslint.org/docs/rules/new-parens
       "new-parens":"error",
    
        // allow/disallow an empty newline after var statement
       "newline-after-var":"off",
    
        // https://eslint.org/docs/rules/newline-before-return
       "newline-before-return":"off",
    
        // enforces new line after each method call in the chain to make it
        // more readable and easy to maintain
        // https://eslint.org/docs/rules/newline-per-chained-call
       "newline-per-chained-call": ["error", { "ignoreChainWithDepth": 4 }],
    
        // disallow use of the Array constructor
       "no-array-constructor":"error",
    
        // disallow use of bitwise operators
        // https://eslint.org/docs/rules/no-bitwise
       "no-bitwise":"error",
    
        // disallow use of the continue statement
        // https://eslint.org/docs/rules/no-continue
       "no-continue":"error",
    
        // disallow comments inline after code
       "no-inline-comments":"off",
    
        // disallow if as the only statement in an else block
        // https://eslint.org/docs/rules/no-lonely-if
       "no-lonely-if":"error",
    
        // disallow un-paren"d mixes of different operators
        // https://eslint.org/docs/rules/no-mixed-operators
       "no-mixed-operators": ["error", {
          // the list of arthmetic groups disallows mixing `%` and `**`
          // with other arithmetic operators.
          "groups": [
            ["%","**"],
            ["%","+"],
            ["%","-"],
            ["%","*"],
            ["%","/"],
            ["/","*"],
            ["&","|","<<",">>",">>>"],
            ["==","!=","===","!=="],
            ["&&","||"]
          ],
          "allowSamePrecedence": false
        }],
    
        // disallow mixed spaces and tabs for indentation
       "no-mixed-spaces-and-tabs":"error",
    
        // disallow use of chained assignment expressions
        // https://eslint.org/docs/rules/no-multi-assign
       "no-multi-assign": ["error"],
    
        // disallow multiple empty lines, only one newline at the end, and no new lines at the beginning
        // https://eslint.org/docs/rules/no-multiple-empty-lines
       "no-multiple-empty-lines": ["error", { "max": 2, "maxBOF": 1, "maxEOF": 0 }],
    
        // disallow negated conditions
        // https://eslint.org/docs/rules/no-negated-condition
       "no-negated-condition":"off",
    
        // disallow nested ternary expressions
       "no-nested-ternary":"error",
    
        // disallow use of the Object constructor
       "no-new-object":"error",
    
        // disallow use of unary operators, ++ and --
        // https://eslint.org/docs/rules/no-plusplus
       "no-plusplus":"error",
    
        // disallow certain syntax forms
        // https://eslint.org/docs/rules/no-restricted-syntax
       "no-restricted-syntax": [
         "error",
          {
            "selector":"ForInStatement",
            "message":"for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array."
          },
          {
            "selector":"ForOfStatement",
            "message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations."
          },
          {
            "selector":"LabeledStatement",
            "message":"Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand."
          },
          {
            "selector":"WithStatement",
            "message":"`with` is disallowed in strict mode because it makes code impossible to predict and optimize."
          }
        ],
    
        // disallow space between function identifier and application
       "no-spaced-func":"error",
    
        // disallow tab characters entirely
       "no-tabs":"error",
    
        // disallow the use of ternary operators
       "no-ternary":"off",
    
        // disallow trailing whitespace at the end of lines
       "no-trailing-spaces": ["error", {
          "skipBlankLines": false,
          "ignoreComments": false
        }],
    
        // disallow dangling underscores in identifiers
        // https://eslint.org/docs/rules/no-underscore-dangle
       "no-underscore-dangle": ["error", {
          "allow": [],
          "allowAfterThis": false,
          "allowAfterSuper": false,
          "enforceInMethodNames": true
        }],
    
        // disallow the use of Boolean literals in conditional expressions
        // also, prefer `a || b` over `a ? a : b`
        // https://eslint.org/docs/rules/no-unneeded-ternary
       "no-unneeded-ternary": ["error", { "defaultAssignment": false }],
    
        // disallow whitespace before properties
        // https://eslint.org/docs/rules/no-whitespace-before-property
       "no-whitespace-before-property":"error",
    
        // enforce the location of single-line statements
        // https://eslint.org/docs/rules/nonblock-statement-body-position
       "nonblock-statement-body-position": ["error","beside", { "overrides": {} }],
    
        // require padding inside curly braces
       "object-curly-spacing": ["error","always"],
    
        // enforce line breaks between braces
        // https://eslint.org/docs/rules/object-curly-newline
       "object-curly-newline": ["error", {
          "ObjectExpression": { "minProperties": 4, "multiline": true, "consistent": true },
          "ObjectPattern": { "minProperties": 4, "multiline": true, "consistent": true },
          "ImportDeclaration": { "minProperties": 4, "multiline": true, "consistent": true },
          "ExportDeclaration": { "minProperties": 4, "multiline": true, "consistent": true }
        }],
    
        // enforce "same line" or "multiple line" on object properties.
        // https://eslint.org/docs/rules/object-property-newline
       "object-property-newline": ["error", {
          "allowAllPropertiesOnSameLine": true
        }],
    
        // allow just one var statement per function
       "one-var": ["error","never"],
    
        // require a newline around variable declaration
        // https://eslint.org/docs/rules/one-var-declaration-per-line
       "one-var-declaration-per-line": ["error","always"],
    
        // require assignment operator shorthand where possible or prohibit it entirely
        // https://eslint.org/docs/rules/operator-assignment
       "operator-assignment": ["error","always"],
    
        // Requires operator at the beginning of the line in multiline statements
        // https://eslint.org/docs/rules/operator-linebreak
       "operator-linebreak": ["error","before", { "overrides": {"=":"none" } }],
    
        // disallow padding within blocks
       "padded-blocks": ["error", {
          "blocks":"never",
          "classes":"never",
          "switches":"never"
        }, {
          "allowSingleLineBlocks": true
        }],
    
        // Require or disallow padding lines between statements
        // https://eslint.org/docs/rules/padding-line-between-statements
       "padding-line-between-statements":"off",
    
        // Prefer use of an object spread over Object.assign
        // https://eslint.org/docs/rules/prefer-object-spread
       "prefer-object-spread":"error",
    
        // require quotes around object literal property names
        // https://eslint.org/docs/rules/quote-props.html
       "quote-props": ["error","as-needed", { "keywords": false, "unnecessary": true, "numbers": false }],
    
        // specify whether double or single quotes should be used
        "quotes": ["error","double", { "avoidEscape": true }],
    
        // do not require jsdoc
        // https://eslint.org/docs/rules/require-jsdoc
       "require-jsdoc":"off",
    
        // require or disallow use of semicolons instead of ASI
        "semi": ["error","always"],
    
       // enforce spacing before and after semicolons
        "semi-spacing": ["error", { "before": false, "after": true }],
    
        // Enforce location of semicolons
        // https://eslint.org/docs/rules/semi-style
       "semi-style": ["error","last"],
    
        // requires object keys to be sorted
       "sort-keys": ["off","asc", { "caseSensitive": false, "natural": true }],
    
        // sort variables within the same declaration block
       "sort-vars":"off",
    
        // require or disallow space before blocks
       "space-before-blocks":"error",
    
        // require or disallow space before function opening parenthesis
        // https://eslint.org/docs/rules/space-before-function-paren
       "space-before-function-paren": ["error", {
          "anonymous":"always",
          "named":"never",
          "asyncArrow":"always"
        }],
    
        // require or disallow spaces inside parentheses
       "space-in-parens": ["error","never"],
    
        // require spaces around operators
       "space-infix-ops":"error",
    
        // Require or disallow spaces before/after unary operators
        // https://eslint.org/docs/rules/space-unary-ops
       "space-unary-ops": ["error", {
          "words": true,
          "nonwords": false,
          "overrides": {
          }
        }],
    
        // require or disallow a space immediately following the // or /* in a comment
        // https://eslint.org/docs/rules/spaced-comment
       "spaced-comment": ["error","always", {
          "line": {
            "exceptions": ["-","+"],
            "markers": ["=","!"] // space here to support sprockets directives
          },
          "block": {
            "exceptions": ["-","+"],
            "markers": ["=","!",":","::"], // space here to support sprockets directives and flow comment types
            "balanced": true
          }
        }],
    
        // Enforce spacing around colons of switch statements
        // https://eslint.org/docs/rules/switch-colon-spacing
       "switch-colon-spacing": ["error", { "after": true, "before": false }],
    
        // Require or disallow spacing between template tags and their literals
        // https://eslint.org/docs/rules/template-tag-spacing
       "template-tag-spacing": ["error","never"],
    
        // require or disallow the Unicode Byte Order Mark
        // https://eslint.org/docs/rules/unicode-bom
       "unicode-bom": ["error","never"],
    
        // require regex literals to be wrapped in parentheses
       "wrap-regex":"off",
    
        // NODE
    
          // enforce return after a callback
         "callback-return":"off",
    
          // require all requires be top-level
          // https://eslint.org/docs/rules/global-require
         "global-require":"error",
      
          // enforces error handling in callbacks (node environment)
         "handle-callback-err":"off",
      
          // disallow use of the Buffer() constructor
          // https://eslint.org/docs/rules/no-buffer-constructor
         "no-buffer-constructor":"error",
      
          // disallow mixing regular variable and require declarations
         "no-mixed-requires": ["off", false],
      
          // disallow use of new operator with the require function
         "no-new-require":"error",
      
          // disallow string concatenation with __dirname and __filename
          // https://eslint.org/docs/rules/no-path-concat
         "no-path-concat":"error",
      
          // disallow use of process.env
         "no-process-env":"off",
      
          // disallow process.exit()
         "no-process-exit":"off",
      
          // restrict usage of specified node modules
         "no-restricted-modules":"off",
      
          // disallow use of synchronous methods (off by default)
         "no-sync":"off",
    
          // ERRORS
    
              // Enforce “for” loop update clause moving the counter in the right direction
        // https://eslint.org/docs/rules/for-direction
       "for-direction":"error",
    
        // Enforces that a return statement is present in property getters
        // https://eslint.org/docs/rules/getter-return
       "getter-return": ["error", { "allowImplicit": true }],
    
        // disallow using an async function as a Promise executor
        // https://eslint.org/docs/rules/no-async-promise-executor
       "no-async-promise-executor":"error",
    
        // Disallow await inside of loops
        // https://eslint.org/docs/rules/no-await-in-loop
       "no-await-in-loop":"error",
    
        // Disallow comparisons to negative zero
        // https://eslint.org/docs/rules/no-compare-neg-zero
       "no-compare-neg-zero":"error",
    
        // disallow assignment in conditional expressions
       "no-cond-assign": ["error","always"],
    
        // disallow use of console
       "no-console":"warn",
    
        // disallow use of constant expressions in conditions
       "no-constant-condition":"warn",
    
        // disallow control characters in regular expressions
       "no-control-regex":"error",
    
        // disallow use of debugger
       "no-debugger":"error",
    
        // disallow duplicate arguments in functions
       "no-dupe-args":"error",
    
        // disallow duplicate keys when creating object literals
       "no-dupe-keys":"error",
    
        // disallow a duplicate case label.
       "no-duplicate-case":"error",
    
        // disallow empty statements
       "no-empty":"error",
    
        // disallow the use of empty character classes in regular expressions
       "no-empty-character-class":"error",
    
        // disallow assigning to the exception in a catch block
       "no-ex-assign":"error",
    
        // disallow double-negation boolean casts in a boolean context
        // https://eslint.org/docs/rules/no-extra-boolean-cast
       "no-extra-boolean-cast":"error",
    
        // disallow unnecessary parentheses
        // https://eslint.org/docs/rules/no-extra-parens
       "no-extra-parens": ["off","all", {
          "conditionalAssign": true,
          "nestedBinaryExpressions": false,
          "returnAssign": false,
          "ignoreJSX":"all", // delegate to eslint-plugin-react
          "enforceForArrowConditionals": false
        }],
    
        // disallow unnecessary semicolons
       "no-extra-semi":"error",
    
        // disallow overwriting functions written as function declarations
       "no-func-assign":"error",
    
        // disallow function or variable declarations in nested blocks
       "no-inner-declarations":"error",
    
        // disallow invalid regular expression strings in the RegExp constructor
       "no-invalid-regexp":"error",
    
        // disallow irregular whitespace outside of strings and comments
       "no-irregular-whitespace":"error",
    
        // Disallow characters which are made with multiple code points in character class syntax
        // https://eslint.org/docs/rules/no-misleading-character-class
       "no-misleading-character-class":"error",
    
        // disallow the use of object properties of the global object (Math and JSON) as functions
       "no-obj-calls":"error",
    
        // disallow use of Object.prototypes builtins directly
        // https://eslint.org/docs/rules/no-prototype-builtins
       "no-prototype-builtins":"error",
    
        // disallow multiple spaces in a regular expression literal
       "no-regex-spaces":"error",
    
        // disallow sparse arrays
       "no-sparse-arrays":"error",
    
        // Disallow template literal placeholder syntax in regular strings
        // https://eslint.org/docs/rules/no-template-curly-in-string
       "no-template-curly-in-string":"error",
    
        // Avoid code that looks like two expressions but is actually one
        // https://eslint.org/docs/rules/no-unexpected-multiline
       "no-unexpected-multiline":"error",
    
        // disallow unreachable statements after a return, throw, continue, or break statement
       "no-unreachable":"error",
    
        // disallow return/throw/break/continue inside finally blocks
        // https://eslint.org/docs/rules/no-unsafe-finally
       "no-unsafe-finally":"error",
    
        // disallow negating the left operand of relational operators
        // https://eslint.org/docs/rules/no-unsafe-negation
       "no-unsafe-negation":"error",
        // disallow negation of the left operand of an in expression
        // deprecated in favor of no-unsafe-negation
       "no-negated-in-lhs":"off",
    
        // Disallow assignments that can lead to race conditions due to usage of await or yield
        // https://eslint.org/docs/rules/require-atomic-updates
        // TODO: enable, semver-major
       "require-atomic-updates":"off",
    
        // disallow comparisons with the value NaN
       "use-isnan":"error",
    
        // ensure JSDoc comments are valid
        // https://eslint.org/docs/rules/valid-jsdoc
       "valid-jsdoc":"off",
    
        // ensure that the results of typeof are compared against a valid string
        // https://eslint.org/docs/rules/valid-typeof
       "valid-typeof": ["error", { "requireStringLiterals": true }],
        
    
        // VARIABLES
    
       "init-declarations":"off",
    
        // disallow the catch clause parameter name being the same as a variable in the outer scope
       "no-catch-shadow":"off",
    
        // disallow deletion of variables
       "no-delete-var":"error",
    
        // disallow labels that share a name with a variable
        // https://eslint.org/docs/rules/no-label-var
       "no-label-var":"error",
    
        // disallow specific globals
        //"no-restricted-globals": ["error","isFinite","isNaN"].concat(confusingBrowserGlobals),
    
        // disallow declaration of variables already declared in the outer scope
       "no-shadow":"error",
    
        // disallow shadowing of names such as arguments
       "no-shadow-restricted-names":"error",
    
        // disallow use of undeclared variables unless mentioned in a /*global */ block
       "no-undef":"error",
    
        // disallow use of undefined when initializing variables
       "no-undef-init":"error",
    
        // disallow use of undefined variable
        // https://eslint.org/docs/rules/no-undefined
        // TODO: enable?
       "no-undefined":"off",
    
        // disallow declaration of variables that are not used in the code
       "no-unused-vars": ["error", { "vars":"all", "args":"after-used", "ignoreRestSiblings": true }],
    
        // disallow use of variables before they are defined
       "no-use-before-define": ["error", { "functions": true, "classes": true, "variables": true }]
      }
}